# Do not modify. Created by annot.pl bcMethod.c
_ system annot  _addSlots: { _curAnnot };
_ system annot  _curAnnot: "Doc: The interface to the garbage collector.\x7f Doc: Returns the total number of bytes allocated.\x7f Doc: Returns the total number of blocks allocated.\x7f Doc: Returns the total number of collections.\x7f Module: defaultBehavior\x7f Doc: The basic behavior delegate.  MOS does a very low level, behind-the-scenes lookup delegation to this special object when certain messages cannot be found through the usual lookup semantics.  This is primarly for bootstrapping and low-level object messages that all objects must respond to; like @\"_clone\", @\"_meta\", @\"isConstant\", and the basic printing and encoding facilities.\x7f Category: Finalize\x7f Category: Weak Pointer\x7f Module: constant\x7f Doc: Constant object behavior.\x7f Category: Clone\x7f Category: Complile\x7f Category: Coerce\x7f Category: Constant\x7f Module: undef\x7f Module: string\x7f Doc: Character string object.  Strings are compact vectors of character objects.\x7f Category: Coerce\x7f Category: Print\x7f Category: Coder\x7f Category: Length\x7f Category: Equal\x7f Category: Get\x7f Category: Subvector\x7f Category: Allocate\x7f Category: Set\x7f Category: Stream\x7f Returns a vector of all selectors.\x7f Module: method\x7f Doc: Is a method object.  Method objects have a meta object that respond to <CODE>@\"applyMethod:\"</CODE>.\x7f Doc: Returns the method object.\x7f Doc: Returns the argument identifier by index.\x7f Module: srcInfo\x7f Doc: A strInfo object contains a source file name and line number.  They are created by the compiler and are used in the debugger.\x7f Module: message\x7f Doc: The message object.Message objects are created by the system whenever a message is sent to an object. Users can dynamically create messages by cloning the message object. \x7f Category: Print\x7f Doc: Send the message to its receiver.\x7f Doc: Send the message to the specified receiver.  Modifies the message's receiver.\x7f Doc: The message that spawned this message.\x7f Doc: The selector for the message.\x7f Doc: The method lookup context, if @u, then the receiver is assumed to be the implementor of the method.\x7f Doc: The receiver of the method.\x7f Doc: The vector object containing the arguments.\x7f Doc: The vector object containing the arguments.\x7f Doc: The sourceInfor object containing the source location of the generation of this message.\x7f Doc: The method that implements the method for the reciever.\x7f Doc: The object that implemented the method for the receiver.  This object is usually the receiver, but may not be if some delegate object is implementing the method.\x7f Module: stream\x7f Doc: Input/Output stream object.\nStream objects are used for system and internal character I/O.\nString objects also follow the Stream protocol.\x7f Category: End-of-stream\x7f Category: Internal\x7f Category: Open\x7f Doc: A new stream must be opened before use.\nA resource identifier (either a filename or a system-level file descriptor) and the stream mode must be specified.\n\nValid modes are:\n\n       r      Open  text  file  for reading.  The stream is posi-\n              tioned at the beginning of the file.\n\n       r+     Open for reading and writing.  The stream is  posi-\n              tioned at the beginning of the file.\n\n       w      Truncate  file  to  zero length or create text file\n              for writing.   The  stream  is  positioned  at  the\n              beginning of the file.\n\n       w+     Open  for reading and writing.  The file is created\n              if it does not exist, otherwise  it  is  truncated.\n              The  stream  is  positioned at the beginning of the\n              file.\n\n       a      Open for writing.  The file is created if  it  does\n              not  exist.  The stream is positioned at the end of\n              the file.\n\n       a+     Open for reading and writing.  The file is  created\n              if  it does not exist.  The stream is positioned at\n              the end of the file.\x7f Doc: Opens the stream on the file with the specified mode.\x7f Doc: Reopens the stream on the file with the specified mode.\x7f Category: Stream\x7f Doc: These methods implement the stream protocol.\x7f Category: Output\x7f Doc: All output stream objects must implement:\x7f Category: Input\x7f Module: catch\x7f Doc: The catch object.  Catch objects are used to do non-local transfer of control.  Catch objects are used by block objects to transfer control to lexical closures.  Catch objects are also used for error handling.  Catch objects respond to @\"value:\" messages by transfering control to context of the @\"do:*\" message that created them.Example: <CODE>\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n];\n\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n] IfThrown:[| v |\n  \"I was thrown \" writeOn: _ system os stdio out;\n  v printOn: _ system os stdio out;\n  \"\n\" writeOn: _ system os stdio out;\n];\n</CODE>\x7f Category: Catch\x7f \x7f Category: Throw\x7f Doc: Causes non-local exit to the @\"catch:\" or @\"catch:IfThrown:\" that created the receiver.\x7f Module: objdesc\x7f Doc: The low-level object descriptor.  All objects have an object descriptor.  Object descriptors contain the following information about an object: \n  Its meta object. \n  Its number of value slots. \n  The methods that it responds to. \n  Its annotations. \n\nObject descriptors are like classes in class-based objects systems except that objects may share object descriptors until they are modified by copy-on-write operations.\x7f Category: Coerce\x7f Module: debugger\x7f Doc: Is the system debugger.\x7f Category: Backtrace\x7f Category: Send Trace\x7f Doc: Returns the current send trace level.\x7f Category: Output\x7f Doc: Empties the debugger output buffer.\x7f Doc: The current debugger level\x7f Doc: The stream to read debugger commands from.";
self bcMethod _annot: (_ system annot  _curAnnot);
self bcMethod _annot: (_ system annot  _curAnnot) For: "\01argumentAt_";
;
self bcMethod _annot: (_ system annot  _curAnnot) For: "\01lobby";
;
self bcMethod _annot: (_ system annot  _curAnnot) For: "\01lobby_";
;
self bcMethod _annot: (_ system annot  _curAnnot) For: "\01dumpToStream_";
;
self bcMethod _annot: (_ system annot  _curAnnot) For: "\01decodeOtherOn_";
;
_ system annot  _curAnnot: "Doc: The interface to the garbage collector.\x7f Doc: Returns the total number of bytes allocated.\x7f Doc: Returns the total number of blocks allocated.\x7f Doc: Returns the total number of collections.\x7f Module: defaultBehavior\x7f Doc: The basic behavior delegate.  MOS does a very low level, behind-the-scenes lookup delegation to this special object when certain messages cannot be found through the usual lookup semantics.  This is primarly for bootstrapping and low-level object messages that all objects must respond to; like @\"_clone\", @\"_meta\", @\"isConstant\", and the basic printing and encoding facilities.\x7f Category: Finalize\x7f Category: Weak Pointer\x7f Module: constant\x7f Doc: Constant object behavior.\x7f Category: Clone\x7f Category: Complile\x7f Category: Coerce\x7f Category: Constant\x7f Module: undef\x7f Module: string\x7f Doc: Character string object.  Strings are compact vectors of character objects.\x7f Category: Coerce\x7f Category: Print\x7f Category: Coder\x7f Category: Length\x7f Category: Equal\x7f Category: Get\x7f Category: Subvector\x7f Category: Allocate\x7f Category: Set\x7f Category: Stream\x7f Returns a vector of all selectors.\x7f Module: method\x7f Doc: Is a method object.  Method objects have a meta object that respond to <CODE>@\"applyMethod:\"</CODE>.\x7f Doc: Returns the method object.\x7f Doc: Returns the argument identifier by index.\x7f Module: srcInfo\x7f Doc: A strInfo object contains a source file name and line number.  They are created by the compiler and are used in the debugger.\x7f Module: message\x7f Doc: The message object.Message objects are created by the system whenever a message is sent to an object. Users can dynamically create messages by cloning the message object. \x7f Category: Print\x7f Doc: Send the message to its receiver.\x7f Doc: Send the message to the specified receiver.  Modifies the message's receiver.\x7f Doc: The message that spawned this message.\x7f Doc: The selector for the message.\x7f Doc: The method lookup context, if @u, then the receiver is assumed to be the implementor of the method.\x7f Doc: The receiver of the method.\x7f Doc: The vector object containing the arguments.\x7f Doc: The vector object containing the arguments.\x7f Doc: The sourceInfor object containing the source location of the generation of this message.\x7f Doc: The method that implements the method for the reciever.\x7f Doc: The object that implemented the method for the receiver.  This object is usually the receiver, but may not be if some delegate object is implementing the method.\x7f Module: stream\x7f Doc: Input/Output stream object.\nStream objects are used for system and internal character I/O.\nString objects also follow the Stream protocol.\x7f Category: End-of-stream\x7f Category: Internal\x7f Category: Open\x7f Doc: A new stream must be opened before use.\nA resource identifier (either a filename or a system-level file descriptor) and the stream mode must be specified.\n\nValid modes are:\n\n       r      Open  text  file  for reading.  The stream is posi-\n              tioned at the beginning of the file.\n\n       r+     Open for reading and writing.  The stream is  posi-\n              tioned at the beginning of the file.\n\n       w      Truncate  file  to  zero length or create text file\n              for writing.   The  stream  is  positioned  at  the\n              beginning of the file.\n\n       w+     Open  for reading and writing.  The file is created\n              if it does not exist, otherwise  it  is  truncated.\n              The  stream  is  positioned at the beginning of the\n              file.\n\n       a      Open for writing.  The file is created if  it  does\n              not  exist.  The stream is positioned at the end of\n              the file.\n\n       a+     Open for reading and writing.  The file is  created\n              if  it does not exist.  The stream is positioned at\n              the end of the file.\x7f Doc: Opens the stream on the file with the specified mode.\x7f Doc: Reopens the stream on the file with the specified mode.\x7f Category: Stream\x7f Doc: These methods implement the stream protocol.\x7f Category: Output\x7f Doc: All output stream objects must implement:\x7f Category: Input\x7f Module: catch\x7f Doc: The catch object.  Catch objects are used to do non-local transfer of control.  Catch objects are used by block objects to transfer control to lexical closures.  Catch objects are also used for error handling.  Catch objects respond to @\"value:\" messages by transfering control to context of the @\"do:*\" message that created them.Example: <CODE>\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n];\n\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n] IfThrown:[| v |\n  \"I was thrown \" writeOn: _ system os stdio out;\n  v printOn: _ system os stdio out;\n  \"\n\" writeOn: _ system os stdio out;\n];\n</CODE>\x7f Category: Catch\x7f \x7f Category: Throw\x7f Doc: Causes non-local exit to the @\"catch:\" or @\"catch:IfThrown:\" that created the receiver.\x7f Module: objdesc\x7f Doc: The low-level object descriptor.  All objects have an object descriptor.  Object descriptors contain the following information about an object: \n  Its meta object. \n  Its number of value slots. \n  The methods that it responds to. \n  Its annotations. \n\nObject descriptors are like classes in class-based objects systems except that objects may share object descriptors until they are modified by copy-on-write operations.\x7f Category: Coerce\x7f Module: debugger\x7f Doc: Is the system debugger.\x7f Category: Backtrace\x7f Category: Send Trace\x7f Doc: Returns the current send trace level.\x7f Category: Output\x7f Doc: Empties the debugger output buffer.\x7f Doc: The current debugger level\x7f Doc: The stream to read debugger commands from.\x7f Doc: The compiler interface.\x7f Doc: The prototype compiler context.  This object controls the compilation of expressions.\x7f The map from bytecode name to bytecode value.\x7f The method prototype.\x7f The vector of argument identifiers.\x7f The vector of local identifiers.\x7f The vector of constant values.\x7f The string containing the current bytecodes.\x7f The inclosing context.\x7f Is this context compiling a block method?\x7f The context of the method we are compiling this method into\x7f This context has a block that returns\x7f Doc: Compile as local initializer\x7f Doc: Compile as local initializer.";
self bcMethod _annot: (_ system annot  _curAnnot) For: "\01decompile";
;
_ system annot  _curAnnot: "Doc: The interface to the garbage collector.\x7f Doc: Returns the total number of bytes allocated.\x7f Doc: Returns the total number of blocks allocated.\x7f Doc: Returns the total number of collections.\x7f Module: defaultBehavior\x7f Doc: The basic behavior delegate.  MOS does a very low level, behind-the-scenes lookup delegation to this special object when certain messages cannot be found through the usual lookup semantics.  This is primarly for bootstrapping and low-level object messages that all objects must respond to; like @\"_clone\", @\"_meta\", @\"isConstant\", and the basic printing and encoding facilities.\x7f Category: Finalize\x7f Category: Weak Pointer\x7f Module: constant\x7f Doc: Constant object behavior.\x7f Category: Clone\x7f Category: Complile\x7f Category: Coerce\x7f Category: Constant\x7f Module: undef\x7f Module: string\x7f Doc: Character string object.  Strings are compact vectors of character objects.\x7f Category: Coerce\x7f Category: Print\x7f Category: Coder\x7f Category: Length\x7f Category: Equal\x7f Category: Get\x7f Category: Subvector\x7f Category: Allocate\x7f Category: Set\x7f Category: Stream\x7f Returns a vector of all selectors.\x7f Module: method\x7f Doc: Is a method object.  Method objects have a meta object that respond to <CODE>@\"applyMethod:\"</CODE>.\x7f Doc: Returns the method object.\x7f Doc: Returns the argument identifier by index.\x7f Module: srcInfo\x7f Doc: A strInfo object contains a source file name and line number.  They are created by the compiler and are used in the debugger.\x7f Module: message\x7f Doc: The message object.Message objects are created by the system whenever a message is sent to an object. Users can dynamically create messages by cloning the message object. \x7f Category: Print\x7f Doc: Send the message to its receiver.\x7f Doc: Send the message to the specified receiver.  Modifies the message's receiver.\x7f Doc: The message that spawned this message.\x7f Doc: The selector for the message.\x7f Doc: The method lookup context, if @u, then the receiver is assumed to be the implementor of the method.\x7f Doc: The receiver of the method.\x7f Doc: The vector object containing the arguments.\x7f Doc: The vector object containing the arguments.\x7f Doc: The sourceInfor object containing the source location of the generation of this message.\x7f Doc: The method that implements the method for the reciever.\x7f Doc: The object that implemented the method for the receiver.  This object is usually the receiver, but may not be if some delegate object is implementing the method.\x7f Module: stream\x7f Doc: Input/Output stream object.\nStream objects are used for system and internal character I/O.\nString objects also follow the Stream protocol.\x7f Category: End-of-stream\x7f Category: Internal\x7f Category: Open\x7f Doc: A new stream must be opened before use.\nA resource identifier (either a filename or a system-level file descriptor) and the stream mode must be specified.\n\nValid modes are:\n\n       r      Open  text  file  for reading.  The stream is posi-\n              tioned at the beginning of the file.\n\n       r+     Open for reading and writing.  The stream is  posi-\n              tioned at the beginning of the file.\n\n       w      Truncate  file  to  zero length or create text file\n              for writing.   The  stream  is  positioned  at  the\n              beginning of the file.\n\n       w+     Open  for reading and writing.  The file is created\n              if it does not exist, otherwise  it  is  truncated.\n              The  stream  is  positioned at the beginning of the\n              file.\n\n       a      Open for writing.  The file is created if  it  does\n              not  exist.  The stream is positioned at the end of\n              the file.\n\n       a+     Open for reading and writing.  The file is  created\n              if  it does not exist.  The stream is positioned at\n              the end of the file.\x7f Doc: Opens the stream on the file with the specified mode.\x7f Doc: Reopens the stream on the file with the specified mode.\x7f Category: Stream\x7f Doc: These methods implement the stream protocol.\x7f Category: Output\x7f Doc: All output stream objects must implement:\x7f Category: Input\x7f Module: catch\x7f Doc: The catch object.  Catch objects are used to do non-local transfer of control.  Catch objects are used by block objects to transfer control to lexical closures.  Catch objects are also used for error handling.  Catch objects respond to @\"value:\" messages by transfering control to context of the @\"do:*\" message that created them.Example: <CODE>\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n];\n\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n] IfThrown:[| v |\n  \"I was thrown \" writeOn: _ system os stdio out;\n  v printOn: _ system os stdio out;\n  \"\n\" writeOn: _ system os stdio out;\n];\n</CODE>\x7f Category: Catch\x7f \x7f Category: Throw\x7f Doc: Causes non-local exit to the @\"catch:\" or @\"catch:IfThrown:\" that created the receiver.\x7f Module: objdesc\x7f Doc: The low-level object descriptor.  All objects have an object descriptor.  Object descriptors contain the following information about an object: \n  Its meta object. \n  Its number of value slots. \n  The methods that it responds to. \n  Its annotations. \n\nObject descriptors are like classes in class-based objects systems except that objects may share object descriptors until they are modified by copy-on-write operations.\x7f Category: Coerce\x7f Module: debugger\x7f Doc: Is the system debugger.\x7f Category: Backtrace\x7f Category: Send Trace\x7f Doc: Returns the current send trace level.\x7f Category: Output\x7f Doc: Empties the debugger output buffer.\x7f Doc: The current debugger level\x7f Doc: The stream to read debugger commands from.";
self bcMethod _annot: (_ system annot  _curAnnot) For: "\01execDebug_";
;
self bcMethod _annot: (_ system annot  _curAnnot) For: "\01sendDebug_";
;
self bcMethod _annot: (_ system annot  _curAnnot) For: "\01bytecodes";
;
self bcMethod _annot: (_ system annot  _curAnnot) For: "\01locals";
;
