# Do not modify. Created by annot.pl catch.c
_ system annot  _addSlots: { _curAnnot };
_ system annot  _curAnnot: "Module: catch\x7f Doc: The catch object.  Catch objects are used to do non-local transfer of control.  Catch objects are used by block objects to transfer control to lexical closures.  Catch objects are also used for error handling.  Catch objects respond to @\"value:\" messages by transfering control to context of the @\"do:*\" message that created them.Example: <CODE>\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n];\n\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n] IfThrown:[| v |\n  \"I was thrown \" writeOn: _ system os stdio out;\n  v printOn: _ system os stdio out;\n  \"\n\" writeOn: _ system os stdio out;\n];\n</CODE>";
self catch _annot: (_ system annot  _curAnnot);
_ system annot  _curAnnot: "Module: catch\x7f Doc: The catch object.  Catch objects are used to do non-local transfer of control.  Catch objects are used by block objects to transfer control to lexical closures.  Catch objects are also used for error handling.  Catch objects respond to @\"value:\" messages by transfering control to context of the @\"do:*\" message that created them.Example: <CODE>\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n];\n\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n] IfThrown:[| v |\n  \"I was thrown \" writeOn: _ system os stdio out;\n  v printOn: _ system os stdio out;\n  \"\n\" writeOn: _ system os stdio out;\n];\n</CODE>\x7f Category: Coerce";
self catch _annot: (_ system annot  _curAnnot) For: "\01asCatch";
;
_ system annot  _curAnnot: "Module: catch\x7f Doc: The catch object.  Catch objects are used to do non-local transfer of control.  Catch objects are used by block objects to transfer control to lexical closures.  Catch objects are also used for error handling.  Catch objects respond to @\"value:\" messages by transfering control to context of the @\"do:*\" message that created them.Example: <CODE>\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n];\n\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n] IfThrown:[| v |\n  \"I was thrown \" writeOn: _ system os stdio out;\n  v printOn: _ system os stdio out;\n  \"\n\" writeOn: _ system os stdio out;\n];\n</CODE>\x7f Category: Catch\x7f Doc: Creates a catch object (C) and performs (arg0 value: C).  If (C value: X) is called then return X, otherwise return the value of (arg0 value: C).";
self catch _annot: (_ system annot  _curAnnot) For: "\01do_";
;
_ system annot  _curAnnot: "Module: catch\x7f Doc: The catch object.  Catch objects are used to do non-local transfer of control.  Catch objects are used by block objects to transfer control to lexical closures.  Catch objects are also used for error handling.  Catch objects respond to @\"value:\" messages by transfering control to context of the @\"do:*\" message that created them.Example: <CODE>\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n];\n\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n] IfThrown:[| v |\n  \"I was thrown \" writeOn: _ system os stdio out;\n  v printOn: _ system os stdio out;\n  \"\n\" writeOn: _ system os stdio out;\n];\n</CODE>\x7f Category: Catch\x7f Doc: Creates a catch object (C) and performs (arg0 value: C).  If (C value: X) is done then return (arg1 value: (X value)), otherwise return result of (arg0 value: C).";
self catch _annot: (_ system annot  _curAnnot) For: "\01do_IfThrown_";
;
_ system annot  _curAnnot: "Module: catch\x7f Doc: The catch object.  Catch objects are used to do non-local transfer of control.  Catch objects are used by block objects to transfer control to lexical closures.  Catch objects are also used for error handling.  Catch objects respond to @\"value:\" messages by transfering control to context of the @\"do:*\" message that created them.Example: <CODE>\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n];\n\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n] IfThrown:[| v |\n  \"I was thrown \" writeOn: _ system os stdio out;\n  v printOn: _ system os stdio out;\n  \"\n\" writeOn: _ system os stdio out;\n];\n</CODE>\x7f Category: Throw\x7f Doc: Causes non-local exit to the @\"catch:\" or @\"catch:IfThrown:\" that created the receiver.";
self catch _annot: (_ system annot  _curAnnot) For: "\01throw_";
;
_ system annot  _curAnnot: "Module: catch\x7f Doc: The catch object.  Catch objects are used to do non-local transfer of control.  Catch objects are used by block objects to transfer control to lexical closures.  Catch objects are also used for error handling.  Catch objects respond to @\"value:\" messages by transfering control to context of the @\"do:*\" message that created them.Example: <CODE>\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n];\n\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n] IfThrown:[| v |\n  \"I was thrown \" writeOn: _ system os stdio out;\n  v printOn: _ system os stdio out;\n  \"\n\" writeOn: _ system os stdio out;\n];\n</CODE>\x7f Category: Throw\x7f Doc: Same as (rcvr throw: @U).";
self catch _annot: (_ system annot  _curAnnot) For: "\01throw";
;
_ system annot  _curAnnot: "Module: catch\x7f Doc: The catch object.  Catch objects are used to do non-local transfer of control.  Catch objects are used by block objects to transfer control to lexical closures.  Catch objects are also used for error handling.  Catch objects respond to @\"value:\" messages by transfering control to context of the @\"do:*\" message that created them.Example: <CODE>\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n];\n\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n] IfThrown:[| v |\n  \"I was thrown \" writeOn: _ system os stdio out;\n  v printOn: _ system os stdio out;\n  \"\n\" writeOn: _ system os stdio out;\n];\n</CODE>\x7f Category: Internal\x7f Doc: The value that was thrown.";
self catch _annot: (_ system annot  _curAnnot) For: "\01tvalue";
;
_ system annot  _curAnnot: "Module: catch\x7f Doc: The catch object.  Catch objects are used to do non-local transfer of control.  Catch objects are used by block objects to transfer control to lexical closures.  Catch objects are also used for error handling.  Catch objects respond to @\"value:\" messages by transfering control to context of the @\"do:*\" message that created them.Example: <CODE>\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n];\n\n_ system proto catch clone do:[| c |\n  doSomething;\n  c value: value;\n  somethingNeverDone;\n] IfThrown:[| v |\n  \"I was thrown \" writeOn: _ system os stdio out;\n  v printOn: _ system os stdio out;\n  \"\n\" writeOn: _ system os stdio out;\n];\n</CODE>\x7f Category: Internal\x7f Doc: True if a value was thrown.";
self catch _annot: (_ system annot  _curAnnot) For: "\01thrown";
;
